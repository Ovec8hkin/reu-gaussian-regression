import numpy as np
from matplotlib import pylab as pl
import trajectory_regression as tregression
import static_regression as sregression
from calculate_errors import compute_errors


def generate_plots_trajectory(regr):
    x = regr[0]
    y = regr[1]
    u = regr[2]
    v = regr[3]
    ur = regr[4]
    vr = regr[5]
    Xo = regr[6]
    ku = regr[7]
    kv = regr[8]
    mod_u = regr[9]
    mod_v = regr[10]
    init = regr[11]
    ue_raw, ve_raw, ue_av_raw, ve_av_raw, ge_av_raw, ue_scaled, ve_scaled, ue_av_scaled, ve_av_scaled, ge_av_scaled = compute_errors(
        regr)

    ds = 2  # What is this property?
    figW = 10.
    figH = 5.

    marker_size = 4
    text_size = 10
    scale = 5

    fig1 = pl.figure(figsize=(figW, figH))

    # Plot the Original Velocity Field
    plot = fig1.add_subplot(1, 2, 1, aspect='equal')
    plot.quiver(x[::ds], y[::ds], u[::ds, ::ds], v[::ds, ::ds], scale=scale)
    plot.streamplot(x, y, u, v)
    plot.plot(Xo[:, 1], Xo[:, 0], 'og', markersize=marker_size)
    plot.plot(init[:, 1], init[:, 0], 'or', markersize=marker_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    plot.set_title('Original Velocity Field (30 samples)', size=text_size)

    # Plot the Velocity Field Generated by the Gaussian Process Regression
    plot = fig1.add_subplot(1, 2, 2, aspect='equal')
    plot.quiver(x[::ds], y[::ds], ur[::ds, ::ds], vr[::ds, ::ds], scale=scale)
    plot.streamplot(x, y, ur, vr)
    plot.plot(Xo[:, 1], Xo[:, 0], 'og', markersize=marker_size)
    plot.plot(init[:, 1], init[:, 0], 'or', markersize=marker_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    plot.set_title('GPR Velocity Field (30 samples)', size=text_size)

    ue_raw = np.absolute(ue_raw)
    ve_raw = np.absolute(ve_raw)
    ue_scaled = np.absolute(ue_scaled)
    ve_scaled = np.absolute(ve_scaled)

    ea = np.sqrt(np.divide(np.add(np.power(ue_raw, 2), np.power(ve_raw, 2)), 2))
    er = np.sqrt(np.divide(np.add(np.power(ue_scaled, 2), np.power(ve_scaled, 2)), 2))

    fig2 = pl.figure(figsize=(figW, figH))

    plot = fig2.add_subplot(1, 3, 1, aspect='equal')
    im1 = plot.imshow(ue_raw, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()],
                      cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Abs. Error U", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig2.colorbar(im1, fraction=0.046, pad=0.04)

    plot = fig2.add_subplot(1, 3, 2, aspect='equal')
    im2 = plot.imshow(ve_raw, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()],
                      cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Abs. Error V", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig2.colorbar(im2, fraction=0.046, pad=0.04)

    plot = fig2.add_subplot(1, 3, 3, aspect='equal')
    im3 = plot.imshow(ea, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Abs. Error", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig2.colorbar(im3, fraction=0.046, pad=0.04)

    fig3 = pl.figure(figsize=(figW, figH))

    plot = fig3.add_subplot(1, 3, 1, aspect='equal')
    im3 = plot.imshow(ue_scaled, vmin=0, vmax=10, origin='center', extent=[x.min(), x.max(), y.min(), y.max()],
                      cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Rel. Error U", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im3, fraction=0.046, pad=0.04)

    plot = fig3.add_subplot(1, 3, 2, aspect='equal')
    im4 = plot.imshow(ve_scaled, vmin=0, vmax=10, origin='center', extent=[x.min(), x.max(), y.min(), y.max()],
                      cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Rel. Error V", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im4, fraction=0.046, pad=0.04)

    plot = fig3.add_subplot(1, 3, 3, aspect='equal')
    im3 = plot.imshow(er, vmin=0, vmax=10, origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Rel. Error U", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im3, fraction=0.046, pad=0.04)

    raw_ku = ku
    raw_kv = kv

    ku = np.sqrt(ku)
    kv = np.sqrt(kv)

    fig3 = pl.figure(figsize=(figW, figH))

    plot = fig3.add_subplot(1, 3, 1, aspect='equal')
    im5 = plot.imshow(ku, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Ku (Standard Deviation)", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im5, fraction=0.046, pad=0.04)

    plot = fig3.add_subplot(1, 3, 2, aspect='equal')
    im6 = plot.imshow(kv, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Kv (Standard Deviation)", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im6, fraction=0.046, pad=0.04)

    plot = fig3.add_subplot(1, 3, 3, aspect='equal')
    im7 = plot.imshow(np.sqrt(np.divide(np.add(np.power(raw_ku, 2), np.power(raw_kv, 2)), 2)), vmin=0, vmax=0.5,
                      origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Ku+Kv", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im7, fraction=0.046, pad=0.04)

    pl.show()


def generate_plots_static(regr, errors_only=False):
    x = regr[0]
    y = regr[1]
    u = regr[2]
    v = regr[3]
    ur = regr[4]
    vr = regr[5]
    Xo = regr[6]
    ku = regr[7]
    kv = regr[8]
    mod_u = regr[9]
    mod_v = regr[10]
    ue_raw, ve_raw, ue_av_raw, ve_av_raw, ge_av_raw, ue_scaled, ve_scaled, ue_av_scaled, ve_av_scaled, ge_av_scaled \
        = compute_errors(regr)

    ds = 2  # What is this property?
    figW = 10.
    figH = 5.

    marker_size = 4
    text_size = 10
    scale = 5

    if not errors_only:
        fig1 = pl.figure(figsize=(figW, figH))

        # Plot the Original Velocity Field
        plot = fig1.add_subplot(1, 2, 1, aspect='equal')
        plot.quiver(x[::ds], y[::ds], u[::ds, ::ds], v[::ds, ::ds], scale=scale)
        plot.streamplot(x, y, u, v)
        plot.plot(Xo[:, 1], Xo[:, 0], 'og', markersize=marker_size)
        plot.set_xlim(-5, 5)
        plot.set_ylim(-5, 5)
        plot.set_title('Original Velocity Field (30 samples)', size=text_size)

        # Plot the Velocity Field Generated by the Gaussian Process Regression
        plot = fig1.add_subplot(1, 2, 2, aspect='equal')
        plot.quiver(x[::ds], y[::ds], ur[::ds, ::ds], vr[::ds, ::ds], scale=scale)
        plot.streamplot(x, y, ur, vr)
        plot.plot(Xo[:, 1], Xo[:, 0], 'og', markersize=marker_size)
        plot.set_xlim(-5, 5)
        plot.set_ylim(-5, 5)
        plot.set_title('GPR Velocity Field (30 samples)', size=text_size)


    ue_raw = np.absolute(ue_raw)
    ve_raw = np.absolute(ve_raw)
    ue_scaled = np.absolute(ue_scaled)
    ve_scaled = np.absolute(ve_scaled)

    ea = np.sqrt(np.divide(np.add(np.power(ue_raw, 2), np.power(ve_raw, 2)), 2))
    er = np.sqrt(np.divide(np.add(np.power(ue_scaled, 2), np.power(ve_scaled, 2)), 2))

    fig2 = pl.figure(figsize=(figW, figH))

    plot = fig2.add_subplot(1, 3, 1, aspect='equal')
    im1 = plot.imshow(ue_raw, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()],
                      cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Abs. Error U", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig2.colorbar(im1, fraction=0.046, pad=0.04)

    plot = fig2.add_subplot(1, 3, 2, aspect='equal')
    im2 = plot.imshow(ve_raw, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()],
                      cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Abs. Error V", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig2.colorbar(im2, fraction=0.046, pad=0.04)

    plot = fig2.add_subplot(1, 3, 3, aspect='equal')
    im3 = plot.imshow(ea, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Abs. Error", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig2.colorbar(im3, fraction=0.046, pad=0.04)

    fig3 = pl.figure(figsize=(figW, figH))

    plot = fig3.add_subplot(1, 3, 1, aspect='equal')
    im3 = plot.imshow(ue_scaled, vmin=0, vmax=10, origin='center', extent=[x.min(), x.max(), y.min(), y.max()],
                      cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Rel. Error U", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im3, fraction=0.046, pad=0.04)

    plot = fig3.add_subplot(1, 3, 2, aspect='equal')
    im4 = plot.imshow(ve_scaled, vmin=0, vmax=10, origin='center', extent=[x.min(), x.max(), y.min(), y.max()],
                      cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Rel. Error V", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im4, fraction=0.046, pad=0.04)

    plot = fig3.add_subplot(1, 3, 3, aspect='equal')
    im3 = plot.imshow(er, vmin=0, vmax=10, origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Rel. Error U", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im3, fraction=0.046, pad=0.04)

    raw_ku = ku
    raw_kv = kv

    ku = np.sqrt(ku)
    kv = np.sqrt(kv)

    fig3 = pl.figure(figsize=(figW, figH))

    plot = fig3.add_subplot(1, 3, 1, aspect='equal')
    im5 = plot.imshow(ku, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Ku (Standard Deviation)", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im5, fraction=0.046, pad=0.04)

    plot = fig3.add_subplot(1, 3, 2, aspect='equal')
    im6 = plot.imshow(kv, vmin=0, vmax=0.5, origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Kv (Standard Deviation)", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im6, fraction=0.046, pad=0.04)

    plot = fig3.add_subplot(1, 3, 3, aspect='equal')
    im7 = plot.imshow(np.sqrt(np.divide(np.add(np.power(raw_ku, 2), np.power(raw_kv, 2)), 2)), vmin=0, vmax=0.5,
                      origin='center', extent=[x.min(), x.max(), y.min(), y.max()], cmap='jet')
    plot.plot(Xo[:, 1], Xo[:, 0], 'or', markersize=marker_size)
    plot.set_title("GPR Ku+Kv", size=text_size)
    plot.set_xlim(-5, 5)
    plot.set_ylim(-5, 5)
    fig3.colorbar(im7, fraction=0.046, pad=0.04)

    pl.show()


if __name__ == "__main__":
    reg = sregression.regression(50)
    generate_plots_static(reg)
